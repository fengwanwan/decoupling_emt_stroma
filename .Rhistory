temp[, some := NULL]
temp
temp[, some := NA]
temp
class(temp$some)
temp[, some := NULL]
temp
temp[, (newcolname) := NA]
temp
class(temp[[newcolname]])
class(temp[[newcolname]]) <- 'character'
temp
class(temp[[newcolname]])
runApp('Languages/vocab_test/test')
temp
temp[1, ][[newcolname]]
temp[1, ][[newcolname]] <- 'thing'
temp
temp[1, ][[newcolname]] <- NA
temp
newinput <- 'thing'
temp[1, ][[newcolname]] <- ifelse(newinput == '', NA, newinput)
temp
class(temp$some)
temp[2, some]
temp[2, some] %>% is.na
is.na(temp[2, some])
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
myfun <- function(x = 2) {x + 2}
myfun()
myfun(0)
myfun(1)
data.frame(a = c(1,2,3), b = c(2,3,4), c = c(3,4,5))
knitr::kable(data.frame(a = c(1,2,3), b = c(2,3,4), c = c(3,4,5)))
temp <- c('a', 'b', 'c', 'd')
paste('Cluster', temp)
paste('Cluster', 1:length(temp))
shiny::runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
shiny::runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp()
runApp('Languages/vocab_test/test')
shiny::runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
library(data.table)
temp <-data.table(a = c(1,2,3), b = c(2,3,4), c = c(NA, NA, NA))
temp
class(temp$c)
sapply(temp, calss)
sapply(temp, class)
temp[, names(temp)[sapply(temp, function(x) all(is.na(x)))]]
temp[, (names(temp)[sapply(temp, function(x) all(is.na(x)))]) := as.character(names(temp)[sapply(temp, function(x) all(is.na(x)))])]
sapply(temp, class)
temp
all_na_columns <- names(temp)[sapply(temp, function(x) all(is.na(x)))]
all_na_columns
temp[, (all_na_columns) := lapply(temp[, ..all_na_columns], function(x) as.character(x))]
temp
class(temp$c)
all_na_columns <- names(temp)[sapply(temp, function(x) all(is.na(x)))]
all_na_columns
temp[, c := c(3,4,5)]
all_na_columns <- names(temp)[sapply(temp, function(x) all(is.na(x)))]
all_na_columns
temp[, c := c(NA, NA, NA)]
temp
class(temp$c)
all_na_columns <- names(temp)[sapply(temp, function(x) all(is.na(x)))]
all_na_columns
temp[, (all_na_columns) := lapply(temp[, ..all_na_columns], as.character)]
temp
class(temp$c)
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
temp
temp <- cbind(temp, list(d = NA))
temp
temp <- temp[, 1:3]
temp
list(d = NA)
cbind(temp, list(d = NA))
cbind(temp, NA)
cbind(temp, setNames(NA, 'd'))
cbind(temp, c(d = NA))
cbind(temp, c(d = 1))
cbind(temp, data.table(d = NA))
cbind(temp, data.table(d = as.character(NA)))
temp <- cbind(temp, data.table(d = as.character(NA)))
temp
class(temp$d)
temp$d
temp$d[1]
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
templist <- list(a = 1, b = 2, c = 3)
templist
templist$b <- NULL
templist
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
shiny::runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
shiny::runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
traceback()
runApp('Languages/vocab_test/test')
shiny::runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
?observeEvent
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
setwd('weizmann/biology/carcinosarcoma/scripts')
library(data.table)
library(ggplot2)
library(magrittr)
library(Matrix)
library(stringr)
library(plyr)
library(cowplot)
library(limma)
source('functions.R')
hmat_ls <- readRDS('../data_and_figures/hmat_ls.rds')
mmat_ls <- readRDS('../data_and_figures/mmat_ls.rds')
hfeatures_ls <- fread('../data_and_figures/hfeatures_ls.csv')
mfeatures_ls <- fread('../data_and_figures/mfeatures_ls.csv')
hbarcodes_ls <- fread('../data_and_figures/hbarcodes_ls.csv')
mbarcodes_ls <- fread('../data_and_figures/mbarcodes_ls.csv')
htsne_ls <- readRDS('../data_and_figures/htsne_ls.rds')
mtsne_ls <- readRDS('../data_and_figures/mtsne_ls.rds')
set.seed(6890)
hdbscan_ls <- fpc::dbscan(htsne_ls$Y, eps = 3.2, MinPts = 30)
mdbscan_ls <- fpc::dbscan(mtsne_ls$Y, eps = 3.4, MinPts = 30)
emt_markers <- fread('../../emt_markers.csv')[
,
gene := alias2SymbolTable(gene)
][
source != 'GO',
sort(unique(gene))
]
# We have plenty of these genes in our datasets:
sum(emt_markers %in% hfeatures_ls$symbol)
sum(str_to_title(tolower(emt_markers)) %in% mfeatures_ls$symbol)
hemt_ids <- hfeatures_ls[symbol %in% emt_markers, gene_id]
memt_ids <- mfeatures_ls[toupper(symbol) %in% emt_markers, gene_id]
hplot_data <- setNames(
cbind(
as.data.table(htsne_ls$Y),
as.character(hdbscan_ls$cluster),
col_nnz(hmat_ls),
hmat_ls[hfeatures_ls[symbol == 'KRT10', gene_id], ],
signature_score(hmat_ls, hemt_ids, nbin = 30)
),
c('x', 'y', 'dbscan_cluster', 'complexity', 'krt10', 'mes')
)
mplot_data <- setNames(
cbind(
as.data.table(mtsne_ls$Y),
as.character(mdbscan_ls$cluster),
col_nnz(mmat_ls),
mmat_ls[mfeatures_ls[symbol == 'Krtcap2', gene_id], ],
signature_score(mmat_ls, memt_ids, nbin = 30)
),
c('x', 'y', 'dbscan_cluster', 'complexity', 'krtcap2', 'mes')
)
pdf('../data_and_figures/tsne_cluster_id_sample2.pdf', width = 6, height = 5)
# Coloured by complexity:
plot_grid(
ggplot(hplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = complexity)) +
geom_point() +
theme_minimal(),
ggplot(mplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = complexity)) +
geom_point() +
theme_minimal(),
nrow = 1,
ncol = 2
)
# Coloured by keratin:
plot_grid(
ggplot(hplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = krt10)) +
geom_point() +
theme_minimal(),
ggplot(mplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = krtcap2)) +
geom_point() +
theme_minimal(),
nrow = 1,
ncol = 2
)
# Coloured by mes score:
plot_grid(
ggplot(hplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = mes)) +
geom_point() +
scale_colour_gradientn(colours = rev(colorRampPalette(RColorBrewer::brewer.pal(11, 'PiYG'))(50))) +
theme_minimal(),
ggplot(mplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = mes)) +
geom_point() +
scale_colour_gradientn(colours = rev(colorRampPalette(RColorBrewer::brewer.pal(11, 'PiYG'))(50))) +
theme_minimal(),
nrow = 1,
ncol = 2
)
dev.off()
pdf('../data_and_figures/tsne_cluster_id_sample2.pdf', width = 12, height = 5)
# Coloured by complexity:
plot_grid(
ggplot(hplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = complexity)) +
geom_point() +
theme_minimal(),
ggplot(mplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = complexity)) +
geom_point() +
theme_minimal(),
nrow = 1,
ncol = 2
)
# Coloured by keratin:
plot_grid(
ggplot(hplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = krt10)) +
geom_point() +
theme_minimal(),
ggplot(mplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = krtcap2)) +
geom_point() +
theme_minimal(),
nrow = 1,
ncol = 2
)
# Coloured by mes score:
plot_grid(
ggplot(hplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = mes)) +
geom_point() +
scale_colour_gradientn(colours = rev(colorRampPalette(RColorBrewer::brewer.pal(11, 'PiYG'))(50))) +
theme_minimal(),
ggplot(mplot_data[dbscan_cluster != 0], aes(x = x, y = y, colour = mes)) +
geom_point() +
scale_colour_gradientn(colours = rev(colorRampPalette(RColorBrewer::brewer.pal(11, 'PiYG'))(50))) +
theme_minimal(),
nrow = 1,
ncol = 2
)
dev.off()
?readLines
setwd()
setwd('')
setwd('~')
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8')
contractnew
contractnew
contractold <- readLines('contractold.txt', encoding = 'UTF-8')
paste(contractnew, collapse = ' ')
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% strsplit('')
contractold
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('')
contractold
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractnew
sum(contractnew == contractold)
length(contractnew)
length(contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractnew
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
for(i in 1:length(contractnew)) {if(contractnew[i] == contractold[i]) print(i)}
length(contractnew)
matching <- TRUE
i <- 1
while(matching) {
if(contractnew[i] == contractold[i]) {
i <- i + 1
} else {
cat(i)
matching <- FALSE
}
}
contractnew[5341:6000]
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
library(stringr)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
contractnew <- readLines('contractnew.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
contractold <- readLines('contractold.txt', encoding = 'UTF-8') %>% paste(collapse = ' ') %>% strsplit('') %>% `[[`(1)
length(contractnew)
length(contractold)
sum(contractnew == contractold)
shiny::runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
shiny::runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
runApp('Languages/vocab_test/test')
setwd('weizmann/biology/emt_caf')
setwd('scripts')
rhdf5::h5ls('../../single_cell_data/slyper_2020/GSM4186956_NSCLC14_fresh-C4_channel1_raw_gene_bc_matrices_h5.h5')
library(rhdf5)
h5ls('../../single_cell_data/slyper_2020/GSM4186956_NSCLC14_fresh-C4_channel1_raw_gene_bc_matrices_h5.h5')
data1 <- h5read(
'../../single_cell_data/slyper_2020/GSM4186956_NSCLC14_fresh-C4_channel1_raw_gene_bc_matrices_h5.h5',
'GRCh38/data'
)
class(data1)
dimnames(data1)
dim(data1)
data1[1:6, 1:6]
head(data1)
head(data1, 50)
as.matrix(data1) %>% dim
library(magrittr)
as.matrix(data1) %>% dim
as.matrix(data1) %>% head
all_data <- H5Fopen(
'../../single_cell_data/slyper_2020/GSM4186956_NSCLC14_fresh-C4_channel1_raw_gene_bc_matrices_h5.h5'
)
all_data@ID
all_data@native
all_data
all_data$GRCh38$data
all_data$GRCh38$data %>% class
dim(as.matrix(all_data$GRCh38))
as.matrix(all_data$GRCh38)
find.package('DropletUtils')
BiocManager::install("DropletUtils")
library(DropletUtils)
write10xCounts(
'../../single_cell_data/slyper_2020/GSM4186956_NSCLC14_fresh-C4_channel1_raw_gene_bc_matrices_h5.h5'
)
h5ls('../../single_cell_data/slyper_2020/GSM4186956_NSCLC14_fresh-C4_channel1_raw_gene_bc_matrices_h5.h5')
all_data <- read10xCounts(
'../../single_cell_data/slyper_2020/GSM4186956_NSCLC14_fresh-C4_channel1_raw_gene_bc_matrices_h5.h5'
)
class(all_data)
rowData(all_data) %>% class
library(data.table)
rowData(all_data) %>% as.data.table
features <- as.data.table(rowData(all_data))
barcoeds <- as.data.table(colData(all_data))
rm(barcoeds)
barcodes <- as.data.table(colData(all_data))
barcodes
barcodes$Sample %>% unique
barcodes <- as.data.table(colData(all_data))[, .(barcode = Barcode)]
barcodes
features
setnames(features, c('gene_id', 'symbol'))
features
dim(as.matrix(all_data))
all_data$Sample %>% class
all_data$Sample %>% head
all_data$Barcode %>% class
all_data$Barcode %>% head
barcodes
all_data[1:6, 1:6]
all_data@assays$data$counts %>% class
all_data@assays$data$counts[1:6, 1:6]
all_data@int_elementMetadata %>% class
all_data@int_elementMetadata %>% dim
all_data@int_elementMetadata %>% head
all_data@reducedDims %>% class
all_data@reducedDims %>% lengt
all_data@reducedDims %>% length
all_data@reducedDims
all_data@metadata %>% class
all_data@metadata %>% length
all_data@metadata
all_data@elementMetadata %>% class
all_data@elementMetadata %>% dim
all_data@assays$callSuper
all_data@assays$copy
all_data@assays$data$counts %>% class
assay(all_data, 'data') %>% class
assay(all_data)
?assay
assayNames(all_data)
assays(all_data)
assays(all_data)$counts
names(assays(all_data))
temp <- assays(all_data)
dim(temp$counts)
rm(temp)
class(assays(all_data)$counts)
dim(barcodes)
dim(features)
temp <- as(assays(all_data)$counts, 'dgCMatrix')
warnings()[1:5]
dim(temp)
h5closeAll()
devtools::install_github("jlaffy/infercna")
remove.packages('tibble')
devtools::install_github("jlaffy/infercna")
remove.packages('dplyr')
install.packages('dplyr')
install.packages("dplyr")
